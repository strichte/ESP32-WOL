/*
 *
 * Display.cpp
 *
 * Created on: 2024-08-15
 *
 *--------------------------------------------------------------
 * Copyright (c) 2024 SXR.
 * This project is licensed under the MIT License.
 * The MIT license can be found in the project root and at
 * https://opensource.org/licenses/MIT.
 *--------------------------------------------------------------
 */

#include <Display.h>

void I2CDisplay::Setup() {
  Wire.begin(I2C_SDA, I2C_SCL, I2C_SPEED);
  display_.setI2CAddress(SSD1315_ADDR);
  display_.begin();
  display_.setFont(u8x8_font_5x7_r);
  ///U display_.setFont(u8g2_font_siji_t_6x10);
}

void I2CDisplay::DrawHeader() {
  ///U display_.drawStr(0, 8, ("IP: " + ETH.localIP().toString()).c_str());  // write something to the internal memory
  display_.drawString(0, 0, ("IP: " + ETH.localIP().toString()).c_str());
  // display_.drawGlyph(118, 8, 0xe043);       // Network
  if (!NetworkHandler::FirstWolSent()) {
    ///U display_.drawGlyph(122, 8, '1');  // NTP
    display_.drawGlyph(15, 0, '1');  // NTP
  }
  ///U display_.drawBox(0, 10, 128 / 100.0F * (*timer_wol_ptr_).PercentRemaining(),
  ///U                 4);  // progress bar
}

void I2CDisplay::UpdateMsgPage(const char *header, char *msg) {
  char line_str[23];
  ///U display_.clearBuffer();
  display_.clearDisplay();
  ///U display_.drawStr(0, 8, header);
  display_.drawString(0, 0, header);
  char *line_token;
  int i = 0;
  for (line_token = strtok(msg, "\n"); line_token && i < 6;
       line_token = strtok(NULL, "\n"), i++) {
    ///U display_.drawStr(0, 24 + i * 8, (const char *)line_token);
    display_.drawString(0, 2 + i, (const char *)line_token);
  }
  current_page_ = status;
  ///U display_.sendBuffer();
}

void I2CDisplay::UpdateStatusPage() {
  ///U display_.clearBuffer();
  display_.clearDisplay();
  DrawHeader();
  ///U display_.drawStr(0, 24, ("Next WOL : " + NetworkHandler::GetNextWolTime(date_only)).c_str());
  ///U display_.drawStr(0, 32, ("           " + NetworkHandler::GetNextWolTime(time_only)).c_str());
  ///U display_.drawStr(0, 40, ("Cur. Time: " + NetworkHandler::GetTime(date_only)).c_str());
  ///U display_.drawStr(0, 48, ("           " + NetworkHandler::GetTime(time_only)).c_str());
  ///U display_.drawStr(0, 56, ("Boot Time: " + NetworkHandler::GetUptime(date_only)).c_str());
  ///U display_.drawStr(0, 64, ("           " + NetworkHandler::GetUptime(time_only)).c_str());
  display_.drawString(0, 2, ("Next WOL : " + NetworkHandler::GetNextWolTime(date_only)).c_str());
  display_.drawString(0, 3, ("           " + NetworkHandler::GetNextWolTime(time_only)).c_str());
  display_.drawString(0, 4, ("Cur. Time: " + NetworkHandler::GetTime(date_only)).c_str());
  display_.drawString(0, 5, ("           " + NetworkHandler::GetTime(time_only)).c_str());
  display_.drawString(0, 6, ("Boot Time: " + NetworkHandler::GetUptime(date_only)).c_str());
  display_.drawString(0, 7, ("           " + NetworkHandler::GetUptime(time_only)).c_str());
  current_page_ = status;
  ///U display_.sendBuffer();
}

void I2CDisplay::UpdateNetworkPage() {
  ///U display_.clearBuffer();
  display_.clearDisplay();
  DrawHeader();

  ///U display_.drawStr(0, 24, ("GW:   " + ETH.gatewayIP().toString()).c_str());
  ///U display_.drawStr(0, 32, ("NM:   " + ETH.subnetMask().toString()).c_str());
  ///U display_.drawStr(0, 40, ("DNS:  " + ETH.dnsIP().toString()).c_str());
  ///U display_.drawStr(0, 48, ("NTP1: " + NetworkHandler::Config().ntp1).c_str());
  ///U display_.drawStr(0, 56, ("NTP2: " + NetworkHandler::Config().ntp1).c_str());
  ///U display_.drawStr(0, 64, NetworkHandler::Config().timezone.c_str());
  display_.drawString(0, 2, ("GW:   " + ETH.gatewayIP().toString()).c_str());
  display_.drawString(0, 3, ("NM:   " + ETH.subnetMask().toString()).c_str());
  display_.drawString(0, 4, ("DNS:  " + ETH.dnsIP().toString()).c_str());
  display_.drawString(0, 5, ("NTP1: " + NetworkHandler::Config().ntp1).c_str());
  display_.drawString(0, 6, ("NTP2: " + NetworkHandler::Config().ntp1).c_str());
  display_.drawString(0, 7, NetworkHandler::Config().timezone.c_str());
  current_page_ = network;
  ///U display_.sendBuffer();
}

void I2CDisplay::UpdateDevicePage() {
  uint size = NetworkHandler::GetWolDevices().size(),
       start = 3 * current_device_page_,
       end = (start + 3) > size ? size : start + 3;
  DrawWolDevice(start, end);
}

bool I2CDisplay::PreviousWolDevicesPage() {
  bool had_previous = false;
  uint size = NetworkHandler::GetWolDevices().size();
  if (current_page_ != devices) {
    uint num_pages = std::ceil(size / 3.0F), start = (num_pages - 1) * 3,
         end = size < (num_pages * 3) ? size : num_pages * 3;
    DrawWolDevice(start, end);
    current_device_page_ = num_pages - 1;
    had_previous = true;
  } else {
    // already showing the a devive page
    uint start = 3 * (current_device_page_ - 1);
    if (start < size) {
      // we have more than one device page
      uint end = (start + 3) > size ? size : start + 3;
      DrawWolDevice(start, end);
      current_device_page_--;
      had_previous = true;
    }
  }
  return had_previous;
}

bool I2CDisplay::NextWolDevicesPage() {
  bool had_next = false;
  uint size = NetworkHandler::GetWolDevices().size();
  if (current_page_ != devices) {
    DrawWolDevice(0, size > 3 ? 3 : size);
    current_device_page_ = 0;
    had_next = true;
  } else {
    // already showing the 1st devive page
    uint start = 3 * (1 + current_device_page_);
    if (start < size) {
      // we have more than one device page
      uint end = start + 3;
      if (end > size) {
        end = size;
      }  // not a full page
      DrawWolDevice(start, end);
      current_device_page_++;
      had_next = true;
    }
  }
  return had_next;
}

void I2CDisplay::DisplayCurrentPage() {
  switch (current_page_) {
    case status:
      UpdateStatusPage();
      break;
    case devices:
      UpdateDevicePage();
      break;
    case network:
      UpdateNetworkPage();
  }
}

bool I2CDisplay::DisplayPreviousPage() {
  bool is_status_page = false;
  switch (current_page_) {
    case status:
      UpdateNetworkPage();
      break;
    case network:
      PreviousWolDevicesPage();
      break;
    case devices:
      if (!PreviousWolDevicesPage()) {
        UpdateStatusPage();
        is_status_page = true;
      }
      break;
  }
  return is_status_page;
}

bool I2CDisplay::DisplayNextPage() {
  bool is_status_page = false;
  switch (current_page_) {
    case status:
      NextWolDevicesPage();
      break;
    case devices:
      if (!NextWolDevicesPage()) {
        UpdateNetworkPage();
      }
      break;
    default:
      UpdateStatusPage();
      is_status_page = true;
  }
  return is_status_page;
}

void I2CDisplay::DrawWolDevice(const uint &start, const uint &end) {
  ///U display_.clearBuffer();
  display_.clearDisplay();
  DrawHeader();
  for (uint i = start, pos = 0; i < end; i++, pos++) {
    ///U display_.drawStr(0, 24 + 16 * pos, std::string(NetworkHandler::GetWolDevices()[i].name + ":").c_str());
    ///U display_.drawStr(0, 32 + 16 * pos, std::string("   " + NetworkHandler::GetWolDevices()[i].mac).c_str());
    display_.drawString(0, 2 + 2 * pos, std::string(NetworkHandler::GetWolDevices()[i].name + ":").c_str());
    display_.drawString(0, 3 + 2 * pos, std::string("   " + NetworkHandler::GetWolDevices()[i].mac).c_str());
  }
  ///U display_.sendBuffer();
  current_page_ = devices;
}